---
- hosts: all
  become: yes
  tasks:
    - name: Update and upgrade all packages
      apt:
        upgrade: dist
        update_cache: yes

    - name: Install unzip, midnight commander (mc)
      apt:
        name:
          - unzip
          - mc
        state: present

    # Here we will install s3fs and configure fuse to allow other users to access the mounted S3 bucket
    - name: Install s3fs so we can mount S3 buckets later
      apt:
        name:
          - s3fs
          - libfuse2
        state: present

    - name: Enable user_allow_other in /etc/fuse.conf
      lineinfile:
        path: /etc/fuse.conf
        regexp: '^#?user_allow_other'
        line: 'user_allow_other'
        state: present
      become: yes

    # Here we will install the Amazon CloudWatch Agent to send EC2 metrics to CloudWatch
    # We will also send Hop Logs to CloudWatch
    - name: Download Amazon CloudWatch Agent .deb
      ansible.builtin.get_url:
        url: https://amazoncloudwatch-agent.s3.amazonaws.com/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
        dest: /tmp/amazon-cloudwatch-agent.deb

    - name: Install Amazon CloudWatch Agent
      ansible.builtin.apt:
        deb: /tmp/amazon-cloudwatch-agent.deb

    - name: Ensure Amazon CloudWatch Agent service is enabled and started
      ansible.builtin.systemd:
        name: amazon-cloudwatch-agent
        enabled: yes
        state: started

    # Download and Install AWS CLI
     # Check AWS CLI version
    - name: Check AWS CLI version
      command: aws --version
      register: aws_cli_version
      ignore_errors: yes
      changed_when: false

    # Set desired AWS CLI version
    - name: Set minimum required AWS CLI version
      set_fact:
        min_aws_cli_version: "2.15.6"

    # Compare installed AWS CLI version with minimum required version
    - name: Compare AWS CLI versions
      set_fact:
        aws_cli_update_needed: "{{ ('aws-cli/' + min_aws_cli_version) not in aws_cli_version.stdout }}"
      when: aws_cli_version.rc == 0

    # Download AWS CLI 2.x if not installed or if update is needed
    - name: Download AWS CLI 2.x
      get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /tmp/awscliv2.zip
        mode: '0644'
      when: aws_cli_version.rc != 0 or aws_cli_update_needed

    # Unzip AWS CLI if needed
    - name: Unzip AWS CLI
      unarchive:
        src: /tmp/awscliv2.zip
        dest: /tmp/
        remote_src: yes
      when: aws_cli_version.rc != 0 or aws_cli_update_needed

    # Install AWS CLI if needed
    - name: Install AWS CLI
      command: /tmp/aws/install
      args:
        creates: /usr/local/bin/aws
      when: aws_cli_version.rc != 0 or aws_cli_update_needed

    # Remove AWS CLI installer files if installation occurred
    - name: Remove AWS CLI installer files
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /tmp/awscliv2.zip
        - /tmp/aws
      when: aws_cli_version.rc != 0 or aws_cli_update_needed

    - name: Install python3-venv
      apt:
        name:
          - python3
          - python3-venv
        state: present

    - name: Create a virtual environment
      command: python3 -m venv /home/ubuntu/venv

    - name: Install boto3 in the virtual environment
      pip:
        name: boto3
        virtualenv: /home/ubuntu/venv

    - name: Write the Python script to get the environment
      copy:
        dest: "/home/ubuntu/getEnvironment.py"
        content: |
          #!/usr/bin/env python3
          import boto3
          import json

          ssm = boto3.client('ssm', region_name='us-east-1')
          response = ssm.get_parameter(Name='hop-development-environment', WithDecryption=True)
          param_value = response['Parameter']['Value']
          parsed_json = json.loads(param_value)
          with open('dev.json', 'w') as outfile:
              json.dump(parsed_json, outfile, indent=4)

    - name: Make the Python script executable
      file:
        path: /home/ubuntu/getEnvironment.py
        mode: '0755'

    - name: Run the Python script
      command: /home/ubuntu/venv/bin/python /home/ubuntu/getEnvironment.py

    - name: Install Java 17 JRE Headless
      apt:
        name: openjdk-17-jre-headless
        state: present

    - name: Check if /opt/hop exists
      stat:
        path: /opt/hop
      register: hop_dir

    - name: Ensure /opt/ directory exists
      file:
        path: /opt/
        state: directory
        mode: '0755'
      when: not hop_dir.stat.exists

    - name: Download Apache Hop
      get_url:
        url: https://dlcdn.apache.org/hop/2.12.0/apache-hop-client-2.12.0.zip
        dest: /opt/apache-hop-client-2.12.0.zip
      timeout: 120  # set timeout to 120 seconds
      register: result
      until: result is succeeded
      retries: 5
      delay: 10
      when: not hop_dir.stat.exists

    - name: Unzip Apache Hop to /opt/
      unarchive:
        src: /opt/apache-hop-client-2.12.0.zip
        dest: /opt/
        remote_src: yes
      when: not hop_dir.stat.exists

    - name: Ensure /opt/hop is owned by ubuntu
      file:
        path: /opt/hop
        owner: ubuntu
        group: ubuntu
        recurse: yes
      become: yes
      when: not hop_dir.stat.exists

    - name: Remove the downloaded zip after extraction
      file:
        path: /opt/apache-hop-client-2.12.0.zip
        state: absent
      when: not hop_dir.stat.exists


    # Tasks to create required directories
    - name: Ensure /opt/hop-jdbc is owned by ubuntu
      file:
        path: /opt/hop-jdbc
        owner: ubuntu
        group: ubuntu
        recurse: yes
      become: yes

    - name: Ensure /opt/hop-config is owned by ubuntu
      file:
        path: /opt/hop-config
        owner: ubuntu
        group: ubuntu
        recurse: yes
      become: yes

    # In this section we will mount the S3 bucket to /opt/hop-audit
    # We will create the directory if it doesn't exist
    - name: Check if /opt/hop-audit is mounted
      ansible.builtin.shell: mount | grep /opt/hop-audit
      register: hop_audit_mounted
      ignore_errors: yes
      changed_when: false

    - name: Ensure /opt/hop-audit is owned by ubuntu
      file:
        path: /opt/hop-audit
        owner: ubuntu
        group: ubuntu
        recurse: yes
      become: yes
      when: hop_audit_mounted.rc != 0


    - name: Get S3 bucket name from local file
      set_fact:
        bucket_name: "{{ lookup('file', './bucket_name.txt') }}"

    - name: Add S3 bucket mount to /etc/fstab for /opt/hop-audit
      lineinfile:
        path: /etc/fstab
        line: "{{ bucket_name }} /opt/hop-audit fuse.s3fs _netdev,allow_other,use_path_request_style,iam_role=auto,nonempty 0 0"
        state: present


    # Optional: Remount all filesystems
    - name: Remount filesystems
      command: mount -a

    - name: Ensure /opt/hop-plugins is owned by ubuntu
      file:
        path: /opt/hop-plugins
        owner: ubuntu
        group: ubuntu
        recurse: yes
      become: yes

    - name: Add /opt/hop to PATH for ubuntu user
      lineinfile:
        path: /home/ubuntu/.profile
        line: 'export PATH="$PATH:/opt/hop"'
        create: yes
      become: no

    - name: Create aliases for hop scripts
      block:
        - lineinfile:
            path: /home/ubuntu/.bashrc
            line: 'alias hop-conf="/opt/hop/hop-conf.sh"'
            create: yes

        - lineinfile:
            path: /home/ubuntu/.bashrc
            line: 'alias hop-encrypt="/opt/hop/hop-encrypt.sh"'
            create: yes

        - lineinfile:
            path: /home/ubuntu/.bashrc
            line: 'alias hop-gui="/opt/hop/hop-gui.sh"'
            create: yes

        - lineinfile:
            path: /home/ubuntu/.bashrc
            line: 'alias hop-import="/opt/hop/hop-import.sh"'
            create: yes

        - lineinfile:
            path: /home/ubuntu/.bashrc
            line: 'alias hop-run="/opt/hop/hop-run.sh"'
            create: yes

        - lineinfile:
            path: /home/ubuntu/.bashrc
            line: 'alias hop-search="/opt/hop/hop-search.sh"'
            create: yes

        - lineinfile:
            path: /home/ubuntu/.bashrc
            line: 'alias hop-server="/opt/hop/hop-server.sh"'
            create: yes

        - lineinfile:
            path: /home/ubuntu/.bashrc
            line: 'alias hop-translator="/opt/hop/hop-translator.sh"'
            create: yes

    # Set environment variables
    - name: Set HOP_SHARED_JDBC_FOLDERS environment variable
      lineinfile:
        path: /etc/environment
        line: 'HOP_SHARED_JDBC_FOLDERS=/opt/hop/lib/jdbc,/opt/hop-jdbc'
        create: yes

    - name: Set HOP_CONFIG_FOLDER environment variable
      lineinfile:
        path: /etc/environment
        line: 'HOP_CONFIG_FOLDER=/opt/hop-config'
        create: yes

    - name: Set HOP_AUDIT_FOLDER environment variable
      lineinfile:
        path: /etc/environment
        line: 'HOP_AUDIT_FOLDER=/opt/hop-audit'
        create: yes

    - name: Set HOP_PLUGIN_BASE_FOLDERS environment variable
      lineinfile:
        path: /etc/environment
        line: 'HOP_PLUGIN_BASE_FOLDERS=/opt/hop/plugins,/opt/hop-plugins'
        create: yes

    # Calculate memory for HOP_OPTIONS
    - name: Gather facts
      setup:

    - name: Set HOP_OPTIONS environment variable with memory calculation
      lineinfile:
        path: /etc/environment
        line: "HOP_OPTIONS=-Xmx{{ ((ansible_memtotal_mb * 0.8) // 1) | int }}M"
        create: yes

    # Bring over custom configuration for Hop.
    - name: Copy setup-hop-environment.sh to /home/ubuntu
      copy:
        src: ./hop-environment/setup-hop-environment.sh
        dest: /home/ubuntu/setup-hop-environment.sh
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Copy introduce-project-to-hop.sh to /home/ubuntu
      copy:
        src: ./hop-environment/introduce-project-to-hop.sh
        dest: /home/ubuntu/introduce-project-to-hop.sh
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Copy run-hop-sample.sh to /home/ubuntu
      copy:
        src: ./hop-environment/run-hop-sample.sh
        dest: /home/ubuntu/run-hop-sample.sh
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Synchronize entire directory metadata from local to remote /opt/hop/config/projects/samples/metadata
      ansible.posix.synchronize:
        src: ./hop-environment/metadata/
        dest: /opt/hop/config/projects/samples/metadata/
        recursive: yes
        set_remote_user: yes
        rsync_opts:
          - "--quiet --chown=ubuntu:ubuntu"

    - name: Reboot the EC2 instance
      command: sudo reboot
      async: 1
      poll: 0
      ignore_errors: true

